package com.omega.framework.task;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.omega.framework.task.bean.GUID;
import com.omega.framework.task.bean.Task;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;
import org.springframework.transaction.support.TransactionSynchronizationAdapter;
import org.springframework.transaction.support.TransactionSynchronizationManager;

import java.util.Date;
import java.util.Map;

/**
 * Created by jackychenb on 11/12/2016.
 */

@Component
public class TaskQueue {

    @Autowired
    private TaskService taskService;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Value("${task.tableName:Task}")
    private String taskTableName;

    public String addTask(final Task task) {
        checkTask(task);

        String dataMapString = null;
        Map<String, String> dataMap = task.getDataMap();
        if (dataMap != null) {
            ObjectMapper mapper = new ObjectMapper();
            try {
                dataMapString = mapper.writeValueAsString(dataMap);
            } catch (JsonProcessingException e) {
                throw new RuntimeException(e);
            }
        }

        jdbcTemplate.update("insert into " + taskTableName
                + "(id, type, triggerTime, dataMap) values(?, ?, ?, ?)", new Object[] {
                task.getId(), task.getType(), task.getTriggerTime(), dataMapString
        });

        if (TransactionSynchronizationManager.isActualTransactionActive()) {
            TransactionSynchronizationManager.registerSynchronization(
                    new TransactionSynchronizationAdapter() {
                        public void afterCommit() {
                            taskService.scheduleTask(task);
                        }
                    });
        } else {
            taskService.scheduleTask(task);
        }

        return task.getId();
    }

    protected void checkTask(Task task) {
        if (StringUtils.isNotBlank(task.getId())) {
            throw new IllegalArgumentException("The task id is to be generated by system");
        }

        String zoneCode = jdbcTemplate.queryForObject("/*!mycat:tag=current_data_node*/ select getTaskZoneCode() from dual", String.class);
        task.setId(GUID.get() + zoneCode);

        String type = task.getType();
        if (type == null || !type.matches("[a-zA-Z_]+\\w*")) {
            throw new IllegalArgumentException("Illegal task type: " + type);
        }

        if (task.getTriggerTime() == null) {
            task.setTriggerTime(new Date());
        }
    }

    public void removeTask(final String id) {
        if (TransactionSynchronizationManager.isActualTransactionActive()) {
            TransactionSynchronizationManager.registerSynchronization(
                    new TransactionSynchronizationAdapter() {
                        public void afterCommit() {
                            taskService.unscheduleTask(id);
                        }
                    });
        } else {
            taskService.unscheduleTask(id);
        }

        jdbcTemplate.update("delete from " + taskTableName + " where id=?",
                new Object[] { id });
    }

}
